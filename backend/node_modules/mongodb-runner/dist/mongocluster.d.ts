import type { MongoServerOptions } from './mongoserver';
import { ConnectionString } from 'mongodb-connection-string-url';
import type { DownloadOptions } from '@mongodb-js/mongodb-downloader';
import type { MongoClientOptions } from 'mongodb';
import { MongoClient } from 'mongodb';
export interface MongoClusterOptions extends Pick<MongoServerOptions, 'logDir' | 'tmpDir' | 'args' | 'binDir' | 'docker'> {
    topology: 'standalone' | 'replset' | 'sharded';
    arbiters?: number;
    secondaries?: number;
    shards?: number;
    version?: string;
    downloadOptions?: DownloadOptions;
}
export declare class MongoCluster {
    private topology;
    private replSetName?;
    private servers;
    private shards;
    private constructor();
    serialize(): unknown;
    isClosed(): boolean;
    static deserialize(serialized: any): Promise<MongoCluster>;
    get hostport(): string;
    get connectionString(): string;
    get connectionStringUrl(): ConnectionString;
    get serverVersion(): string;
    get serverVariant(): 'enterprise' | 'community';
    static start({ ...options }: MongoClusterOptions): Promise<MongoCluster>;
    close(): Promise<void>;
    withClient<Fn extends (client: MongoClient) => any>(fn: Fn, clientOptions?: MongoClientOptions): Promise<ReturnType<Fn>>;
    ref(): void;
    unref(): void;
}
//# sourceMappingURL=mongocluster.d.ts.map