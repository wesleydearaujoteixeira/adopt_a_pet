"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.stop = exports.prune = exports.instances = exports.start = void 0;
const mongodb_1 = require("mongodb");
const path_1 = __importDefault(require("path"));
const mongocluster_1 = require("./mongocluster");
const util_1 = require("./util");
const fs = __importStar(require("fs/promises"));
async function start(argv, args) {
    const id = argv.id || new mongodb_1.BSON.UUID().toHexString();
    if (!/^[a-zA-Z0-9_-]+$/.test(id)) {
        throw new Error(`ID '${id}' contains non-alphanumeric characters`);
    }
    await fs.mkdir(argv.runnerDir, { recursive: true });
    const cluster = await mongocluster_1.MongoCluster.start({
        ...argv,
        args,
    });
    const serialized = await cluster.serialize();
    const { connectionString } = cluster;
    await fs.writeFile(path_1.default.join(argv.runnerDir, `m-${id}.json`), JSON.stringify({ id, serialized, connectionString }));
    cluster.unref();
    return { cluster, id };
}
exports.start = start;
async function* instances(argv) {
    for await (const { name } of await fs.opendir(argv.runnerDir)) {
        if (name.startsWith('m-') && name.endsWith('.json')) {
            try {
                const filepath = path_1.default.join(argv.runnerDir, name);
                const stored = JSON.parse(await fs.readFile(filepath, 'utf8'));
                yield { ...stored, filepath };
            }
            catch {
            }
        }
    }
}
exports.instances = instances;
async function prune(argv) {
    async function handler(instance) {
        try {
            const cluster = await mongocluster_1.MongoCluster.deserialize(instance.serialized);
            await cluster.withClient(() => {
            }, { serverSelectionTimeoutMS: 2000 });
        }
        catch (e) {
            await fs.rm(instance.filepath);
        }
    }
    await (0, util_1.parallelForEach)(instances(argv), handler);
}
exports.prune = prune;
async function stop(argv) {
    const toStop = [];
    for await (const instance of instances(argv)) {
        if (instance.id === argv.id || argv.all)
            toStop.push(instance);
    }
    await Promise.all(toStop.map(async ({ filepath, serialized }) => {
        await (await mongocluster_1.MongoCluster.deserialize(serialized)).close();
        await fs.rm(filepath);
    }));
}
exports.stop = stop;
//# sourceMappingURL=runner-helpers.js.map